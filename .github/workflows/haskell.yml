on: [push]
name: Haskell Builds
jobs:
  build:
    name: Haskell Build
    runs-on: ubuntu-latest # or macOS-latest, or windows-latest
    strategy:
      fail-fast: false
      matrix:
        ghc-version:
          - '9.8'
        cabal-version: ['3.10.2.0']
    steps:
      # Checkout
      - uses: actions/checkout@v3

      # Setup
      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup
        if: steps.tooling-cache.outputs.cache-hit != 'true'
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ matrix.cabal-version }}

      # Generate Plan
      - name: Configure the Build
        run: |
          rm cabal.project.freeze
          cabal configure --enable-tests
          cabal build --dry-run

      # Restore cache
      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}

      # Build deps (for caching)
      - name: Cabal build dependencies
        run: cabal build all --only-dependencies

      # Save dependency cache
      - name: Save cache
        uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      # Cabal build
      - name: Cabal Bulid
        run: |
          cabal build all

      # Cabal tests
      - name: Cabal Test
        run: |
          cabal test all

  build-lower-bounds:
    name: Haskell Build (lower bounds)
    runs-on: ubuntu-latest # or macOS-latest, or windows-latest
    strategy:
      fail-fast: false
      matrix:
        ghc-version: ['9.8.1']
        cabal-version: ['3.10.2.0']
    steps:
      # Checkout
      - uses: actions/checkout@v3

      # Setup
      - name: Setup Haskell
        uses: haskell-actions/setup@v2
        id: setup
        if: steps.tooling-cache.outputs.cache-hit != 'true'
        with:
          ghc-version: ${{ matrix.ghc-version }}
          cabal-version: ${{ matrix.cabal-version }}

      # Generate Plan
      - name: Configure the Build
        run: |
          (cat << EOF
          packages: .
          constraints:
            aeson == 2.2.1.0,
            async == 2.2.5,
            base == 4.19.0.0,
            binary == 0.8.9.1,
            bytestring == 0.12.0.2,
            clock == 0.8.4,
            conduit == 1.3.5,
            containers == 0.6.8,
            crdt-event-fold == 1.8.0.2,
            data-default-class == 0.1.2.0,
            hostname == 1.0,
            hspec == 2.11.7,
            http-api-data == 0.6,
            lens == 5.2.3,
            lens-aeson == 1.2.3,
            monad-logger == 0.3.40,
            mtl == 2.3.1,
            mustache == 2.4.2,
            network == 3.1.4.0,
            om-fork == 0.7.1.9,
            om-kubernetes == 2.3.1.8,
            om-logging == 1.1.0.8,
            om-show == 0.1.2.9,
            om-socket == 0.11.0.5,
            om-time == 0.3.0.4,
            random-shuffle == 0.0.4,
            safe == 0.3.20,
            safe-exceptions == 0.1.7.4,
            stm == 2.5.2.1,
            template-haskell == 2.21.0.0,
            text == 2.1,
            time == 1.12.2,
            transformers == 0.6.1.0,
            unix == 2.8.5.0,
            unliftio == 0.2.25.0,
            unliftio-core == 0.2.1.0,
            uuid == 1.3.15,
            vector == 0.13.1.0
          EOF
          ) > cabal.project
          rm cabal.project.freeze
          cabal configure --enable-tests
          cabal build --dry-run

      # Restore cache
      - name: Restore cached dependencies
        uses: actions/cache/restore@v3
        id: cache
        env:
          key: ${{ runner.os }}-ghc-${{ steps.setup.outputs.ghc-version }}-cabal-${{ steps.setup.outputs.cabal-version }}
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ env.key }}-plan-${{ hashFiles('**/plan.json') }}

      # Build deps (for caching)
      - name: Cabal build dependencies
        run: cabal build all --only-dependencies

      # Save dependency cache
      - name: Save cache
        uses: actions/cache/save@v3
        if: steps.cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.setup.outputs.cabal-store }}
          key: ${{ steps.cache.outputs.cache-primary-key }}

      # Cabal Build
      - name: Cabal Bulid
        run: cabal build all

      # Cabal Test
      - name: Cabal Test
        run: cabal test all



